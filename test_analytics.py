"""
Test the analytics engine functionality
"""

import sys
from pathlib import Path

# Add parent directory to path
sys.path.append(str(Path(__file__).parent))

from services.analytics import AnalyticsEngine


def test_analytics_engine():
    analytics = AnalyticsEngine()
    
    try:
        print("Testing Analytics Engine - Normal vs All Spending Toggle...")
        
        # Test 1: Spending statistics comparison
        print("\n1. Spending Statistics Comparison:")
        
        normal_stats = analytics.get_spending_statistics(include_analytics_only=True)
        all_stats = analytics.get_spending_statistics(include_analytics_only=False)
        
        print(f"   Normal Spending Only:")
        print(f"     Total: ${normal_stats['total']:.2f}")
        print(f"     Count: {normal_stats['count']} transactions")
        print(f"     Average: ${normal_stats['average']:.2f}")
        print(f"     Range: ${normal_stats['min']:.2f} - ${normal_stats['max']:.2f}")
        
        print(f"\n   All Spending (including abnormal):")
        print(f"     Total: ${all_stats['total']:.2f}")
        print(f"     Count: {all_stats['count']} transactions")
        print(f"     Average: ${all_stats['average']:.2f}")
        print(f"     Range: ${all_stats['min']:.2f} - ${all_stats['max']:.2f}")
        
        # Verify the toggle is working
        abnormal_transactions = all_stats['count'] - normal_stats['count']
        abnormal_spending = all_stats['total'] - normal_stats['total']
        
        print(f"\n   Abnormal Transactions Filtered:")
        print(f"     Count: {abnormal_transactions} transactions")
        print(f"     Amount: ${abnormal_spending:.2f}")
        
        assert all_stats['total'] >= normal_stats['total'], "All spending should be >= normal spending"
        assert all_stats['count'] >= normal_stats['count'], "All count should be >= normal count"
        
        print("   âœ“ Toggle functionality working correctly")
        
        # Test 2: Day of week analysis
        print("\n2. Day of Week Analysis:")
        
        normal_days = analytics.analyze_spending_by_day_of_week(include_analytics_only=True)
        all_days = analytics.analyze_spending_by_day_of_week(include_analytics_only=False)
        
        print(f"   Normal Spending by Day:")
        for day, amount in normal_days.items():
            print(f"     {day}: ${amount:.2f}")
        
        highest_day_normal = max(normal_days, key=normal_days.get)
        highest_day_all = max(all_days, key=all_days.get)
        
        print(f"\n   Highest Spending Day (Normal): {highest_day_normal} (${normal_days[highest_day_normal]:.2f})")
        print(f"   Highest Spending Day (All): {highest_day_all} (${all_days[highest_day_all]:.2f})")
        
        # Test 3: Category analysis
        print("\n3. Category Analysis:")
        
        normal_categories = analytics.analyze_spending_by_category(include_analytics_only=True)
        all_categories = analytics.analyze_spending_by_category(include_analytics_only=False)
        
        print(f"   Top 3 Categories (Normal Spending):")
        for category, amount in sorted(normal_categories.items(), key=lambda x: x[1], reverse=True)[:3]:
            print(f"     {category}: ${amount:.2f}")
        
        print(f"\n   Top 3 Categories (All Spending):")
        for category, amount in sorted(all_categories.items(), key=lambda x: x[1], reverse=True)[:3]:
            print(f"     {category}: ${amount:.2f}")
        
        # Test 4: Weekly trends
        print("\n4. Weekly Spending Trends:")
        
        normal_weeks = analytics.analyze_spending_by_week(include_analytics_only=True, weeks_back=5)
        all_weeks = analytics.analyze_spending_by_week(include_analytics_only=False, weeks_back=5)
        
        print(f"   Recent Weeks (Normal vs All):")
        for week in sorted(set(list(normal_weeks.keys()) + list(all_weeks.keys())))[-5:]:
            normal_amt = normal_weeks.get(week, 0)
            all_amt = all_weeks.get(week, 0)
            print(f"     Week {week}: ${normal_amt:.2f} | ${all_amt:.2f}")
        
        # Test 5: Spending patterns
        print("\n5. Spending Patterns Analysis:")
        
        normal_patterns = analytics.find_spending_patterns(include_analytics_only=True)
        all_patterns = analytics.find_spending_patterns(include_analytics_only=False)
        
        print(f"   Normal Spending Patterns:")
        print(f"     Highest day: {normal_patterns['highest_spending_day']} (${normal_patterns['highest_day_amount']:.2f})")
        print(f"     Top category: {normal_patterns['top_spending_category']} (${normal_patterns['top_category_amount']:.2f})")
        print(f"     Average transaction: ${normal_patterns['average_transaction']:.2f}")
        print(f"     Largest transaction: ${normal_patterns['largest_transaction']:.2f}")
        
        print(f"\n   All Spending Patterns:")
        print(f"     Highest day: {all_patterns['highest_spending_day']} (${all_patterns['highest_day_amount']:.2f})")
        print(f"     Top category: {all_patterns['top_spending_category']} (${all_patterns['top_category_amount']:.2f})")
        print(f"     Average transaction: ${all_patterns['average_transaction']:.2f}")
        print(f"     Largest transaction: ${all_patterns['largest_transaction']:.2f}")
        
        # Test 6: Dashboard summary
        print("\n6. Dashboard Summary:")
        
        dashboard_normal = analytics.generate_dashboard_summary(include_analytics_only=True)
        dashboard_all = analytics.generate_dashboard_summary(include_analytics_only=False)
        
        print(f"   Normal Mode Summary:")
        print(f"     Mode: {dashboard_normal['analytics_mode']}")
        print(f"     Total Spending: ${dashboard_normal['spending_stats']['total']:.2f}")
        print(f"     Transaction Count: {dashboard_normal['spending_stats']['count']}")
        
        print(f"\n   All Spending Mode Summary:")
        print(f"     Mode: {dashboard_all['analytics_mode']}")
        print(f"     Total Spending: ${dashboard_all['spending_stats']['total']:.2f}")
        print(f"     Transaction Count: {dashboard_all['spending_stats']['count']}")
        
        # Test 7: Chart generation (test that they don't crash)
        print("\n7. Chart Generation Test:")
        
        try:
            day_chart = analytics.create_day_of_week_chart(include_analytics_only=True)
            category_pie = analytics.create_category_pie_chart(include_analytics_only=True)
            category_bar = analytics.create_category_bar_chart(include_analytics_only=True)
            weekly_trend = analytics.create_weekly_trend_chart(include_analytics_only=True)
            monthly_trend = analytics.create_monthly_trend_chart(include_analytics_only=True)
            comparison_chart = analytics.create_comparison_chart()
            
            print("   âœ“ Day of week chart generated")
            print("   âœ“ Category pie chart generated")
            print("   âœ“ Category bar chart generated")
            print("   âœ“ Weekly trend chart generated")
            print("   âœ“ Monthly trend chart generated")
            print("   âœ“ Comparison chart generated")
            
        except Exception as chart_error:
            print(f"   Chart generation error: {chart_error}")
        
        print("\nâœ“ Analytics Engine test completed successfully!")
        print("\nKey Features Verified:")
        print("  âœ“ Normal vs All spending toggle")
        print("  âœ“ Day of week spending analysis") 
        print("  âœ“ Category breakdowns")
        print("  âœ“ Weekly and monthly trends")
        print("  âœ“ Spending pattern detection")
        print("  âœ“ Statistical summaries")
        print("  âœ“ Chart generation")
        print("  âœ“ Dashboard summaries")
        
        # Show the impact of filtering abnormal transactions
        if abnormal_transactions > 0:
            print(f"\nðŸ“Š Analytics Impact:")
            print(f"  Abnormal transactions filtered: {abnormal_transactions}")
            print(f"  Abnormal spending filtered: ${abnormal_spending:.2f}")
            print(f"  This keeps your analytics focused on normal spending patterns!")
        
    except Exception as e:
        print(f"Error testing analytics engine: {e}")
        import traceback
        traceback.print_exc()
    finally:
        analytics.close()


if __name__ == "__main__":
    test_analytics_engine()